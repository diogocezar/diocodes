generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("URI_MONGODB")
}

enum Role {
    ADMIN
    USER
}

model Person {
    id                String      @id @default(uuid()) @map("_id")
    name              String
    email             String      @unique
    user              User?
    hostMentoring     Mentoring[] @relation("host")
    attendeeMentoring Mentoring[] @relation("atendee")
    createdAt         DateTime    @default(now())
    updatedAt         DateTime?
    removedAt         DateTime?
    mentoringId       String?
}

model User {
    id        String    @id @default(uuid()) @map("_id")
    person    Person    @relation(fields: [personId], references: [id])
    personId  String    @unique
    role      Role      @default(USER)
    createdAt DateTime  @default(now())
    updatedAt DateTime?
    removedAt DateTime?
}

model Tag {
    id             String           @id @default(uuid()) @map("_id")
    name           String
    createdAt      DateTime         @default(now())
    updatedAt      DateTime?
    removedAt      DateTime?
    avaliationTags AvaliationTags[]
}

model AvaliationTags {
    id           String      @id @default(uuid()) @map("_id")
    avaliation   Avaliation? @relation(fields: [avaliationId], references: [id])
    avaliationId String?
    tag          Tag?        @relation(fields: [tagId], references: [id])
    tagId        String?
    createdAt    DateTime    @default(now())
    updatedAt    DateTime?
    removedAt    DateTime?
}

model Avaliation {
    id             String           @id @default(uuid()) @map("_id")
    mentoring      Mentoring        @relation(fields: [mentoringId], references: [id])
    mentoringId    String           @unique
    rating         Int
    avaliationTags AvaliationTags[]
    comment        String?
    wasSent        Boolean          @default(false)
    createdAt      DateTime         @default(now())
    updatedAt      DateTime?
    removedAt      DateTime?
}

model Mentoring {
    id         String      @id @default(uuid()) @map("_id")
    host       Person      @relation("host", fields: [hostId], references: [id])
    hostId     String
    attendee   Person      @relation("atendee", fields: [attendeeId], references: [id])
    attendeeId String
    startTime  DateTime
    endTime    DateTime
    avaliation Avaliation?
    createdAt  DateTime    @default(now())
    updatedAt  DateTime?
    removedAt  DateTime?
}
